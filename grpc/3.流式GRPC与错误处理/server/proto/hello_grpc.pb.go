// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/hello.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeteringClient is the client API for Greetering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeteringClient interface {
	Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
}

type greeteringClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeteringClient(cc grpc.ClientConnInterface) GreeteringClient {
	return &greeteringClient{cc}
}

func (c *greeteringClient) Hello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/proto.Greetering/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeteringServer is the server API for Greetering service.
// All implementations must embed UnimplementedGreeteringServer
// for forward compatibility
type GreeteringServer interface {
	Hello(context.Context, *HelloReq) (*HelloResp, error)
	mustEmbedUnimplementedGreeteringServer()
}

// UnimplementedGreeteringServer must be embedded to have forward compatible implementations.
type UnimplementedGreeteringServer struct {
}

func (UnimplementedGreeteringServer) Hello(context.Context, *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedGreeteringServer) mustEmbedUnimplementedGreeteringServer() {}

// UnsafeGreeteringServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeteringServer will
// result in compilation errors.
type UnsafeGreeteringServer interface {
	mustEmbedUnimplementedGreeteringServer()
}

func RegisterGreeteringServer(s grpc.ServiceRegistrar, srv GreeteringServer) {
	s.RegisterService(&Greetering_ServiceDesc, srv)
}

func _Greetering_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeteringServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Greetering/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeteringServer).Hello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Greetering_ServiceDesc is the grpc.ServiceDesc for Greetering service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greetering_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Greetering",
	HandlerType: (*GreeteringServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Greetering_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hello.proto",
}
